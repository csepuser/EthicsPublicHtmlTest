<?php
// $Id: nodereview.module,v 1.5.2.7.2.1 2009/05/16 16:29:51 junedkazi Exp $

define('NODEREVIEW_FIVESTAR_ENABLE', module_exists('fivestar') && variable_get('nodereview_fivestar_enable', 0));


if(!function_exists("node_object_prepare")) {
  include_once(drupal_get_path('module', 'node') . '/node.pages.inc');
 }

 require_once(drupal_get_path('module', 'nodereview') . '/nodereview_node_nodereview.inc');



/**
 * @file
 * This module adds user reviews to specified node types, on multiple axes and with
 * voting via the Voting API module (required).  It uses the Views module
 * (required) for some displays.
 */


/**
 * Implementation of hook_help().
 *
 */
function nodereview_help($path, $arg) {

  // We want to show custom help text on both the add and edit pages, which
  // have very different path structures
  if ('node' == arg(0)) {
    if ('addreview' == arg(2)) {
      $reviewed_nid = arg(1);
      $reviewed_node = node_load($reviewed_nid);
      $help_text = filter_xss_admin(variable_get('nodereview_guide_'. $reviewed_node->type, ''));
      if ($help_text) return $help_text;
    }
    elseif ('edit' == arg(2)) {
      // Get the type of the node we're reviewing, which is not the nid in the path
      $type = db_result(db_query("SELECT n.type
        FROM {node} n
          INNER JOIN {nodereview} nr ON n.nid=nr.reviewed_nid
        WHERE nr.nid=%d", arg(1)));

      $help_text = filter_xss_admin(variable_get('nodereview_guide_'. $type, ''));
      if ($help_text) return $help_text;
    }
  }
}

/**
 * Implementation of hook_node_info().
 *
 */

function nodereview_node_info() {
  return array(
    'nodereview' => array(
      'name' => t('Review'),
      'module' => 'nodereview',
      'description' => 'A review is a user-supplied critique of another node.',
      'has_title' => TRUE,
      'title_label' => t('Short comment'),
      'has_body' => FALSE,
    )
  );
}


/**
 * Implementation of hook_perm().
 *
 */
function nodereview_perm() {
  return array(
    'administer reviews',
    'read reviews',
    'submit reviews',
    'edit own reviews'
  );
}

/**
 * Implementation of hook_link().
 *
 */
function nodereview_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();
  global $user;

  if ($type == 'node' && $node->type == 'nodereview') {

    // Add a link back to the node being reviewed by this node
    $reviewed_type = node_get_types('type', db_result(db_query("SELECT type FROM {node} WHERE nid=%d", $node->reviewed_nid)));
    $reviewed_type = $reviewed_type->name;

    $links['nodereview_reviewed_node'] = array(
    'title' => t('View @type', array('@type' => $reviewed_type)),
    'href' => "node/{$node->reviewed_nid}",
    'attributes' => array('title' => t('View the @type being reviewed', array('@type' => $reviewed_type))),
   );
  }

  return $links;
}

/**
 * Implementation of hook_menu().
 *
 */
function nodereview_menu() {
  $items = array();
  global $user;

  $items['admin/content/nodereview'] = array(
    'title' => t('Review types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nodereview_configure'),
    'file' => 'nodereview.admin.inc',
    'file path' => drupal_get_path('module', 'nodereview'),
    'access arguments' => array('administer reviews'),
    'description' => t('Configure the axes for node type review'),
    );

  $items['admin/content/nodereview/types'] = array(
    'title' => t('List'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nodereview_configure'),
    'file' => 'nodereview.admin.inc',
    'file path' => drupal_get_path('module', 'nodereview'),
    'access arguments' => array('administer reviews'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
    );


  // Add a tab for each node type that we can review
  // It's slow to put this here, as it should go in

  foreach(node_get_types() as $type => $info) {
    if(variable_get('nodereview_use_'. $type, 0)) {
      $items['admin/content/nodereview/' . $type] = array(
        'title callback' => 'check_plain',
        'title arguments' => array($info->name),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('nodereview_configure_axes', $type, $info->name),
        'file' => 'nodereview.admin.inc',
        'file path' => drupal_get_path('module', 'nodereview'),
        'access arguments' => array('administer reviews'),
        'type' => MENU_LOCAL_TASK,
      );

    }

  }

   $items['node/%/reviews'] = array(
     'title' => t('Reviews'),
     'page callback' => 'views_page',
     'page arguments' => array('review_list', 'page_1', 1),
     'access callback' => 'read_reviews_access',
     'access arguments' => array(1),
     'file' => 'views.module',
     'file path' => drupal_get_path('module', 'views'),
     'type' => MENU_LOCAL_TASK,
     'weight' => 2,
   );

  

  $items['node/%node_add_review/addreview'] = array(
    'title' => t('Add review'),
    'page callback' => 'node_add',
    'page arguments' => array('nodereview'),
    'access callback' => 'addreview_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );

  $items['node/%node_edit_review/editreview'] = array(
    'title' => t('Edit your review'),
    'page callback' => 'node_page_edit',
    'page arguments' => array(1),
    'access arguments' => array('edit own reviews'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );

  return $items;
}



/**
 * Implementation of hook_menu_alter()
 *
 */
function nodereview_menu_alter(&$callbacks) {
  // Hide the normal node-add page, since we never want users to see it
  unset($callbacks['node/add/nodereview']);


}



/**
 * Implementation of hook_form_alter()
 *
 */
function nodereview_form_alter(&$form, $form_state, $form_id) {

  if ($form_id == 'node_type_form') {

    // variable_set('nodereview_node_types', array());
    $node_type = $form['old_type']['#value'];

    // We don't use the normal submission guidelines anyway, so hide the form field for them.
    if ($node_type == 'nodereview') {
      $form['submission']['help']['#type'] = 'value';
      $form['submission']['help']['#value'] = '';
    }

    // The node type form automatically appends the node type to the variable name when saving
    $form['workflow']['nodereview_use'] = array(
      '#type' => 'radios',
      '#title' => t('Enable user reviews'),
      '#default_value' => variable_get('nodereview_use_' . $node_type, 0),
      '#options' => array(0 => t('Disabled'), 1 => t('Enabled')),
      '#description' => t('You can configure axes for reviewable nodes on the <a href="!url">reviews page</a>.', array('!url' => url('admin/content/nodereview'))),
    );
  }
}


/**
  * Implementation of hook_theme().
  * We declare  nodereview_configure_axes so
  * Drupal will look for a function
  * named theme_nodereview_configure_axes().
  */
function nodereview_theme() {
   return array(
      'nodereview_configure_axes' => array(
         'arguments' => array('form'),
         'file' => 'nodereview.theme.inc',
         'path' => drupal_get_path('module', 'nodereview'),
      ),
      'nodereview_review_body' => array(
         'arguments' => array('review' => NULL, 'node' => NULL),
         'file' => 'nodereview.theme.inc',
         'path' => drupal_get_path('module', 'nodereview'),
      ),
      'nodereview_review_preview' => array(
         'arguments' => array('review' => NULL, 'node' => NULL),
         'file' => 'nodereview.theme.inc',
         'path' => drupal_get_path('module', 'nodereview'),
      ),
      'nodereview_teaser' => array(
         'arguments' => array('node' => NULL),
         'file' => 'nodereview.theme.inc',
         'path' => drupal_get_path('module', 'nodereview'),
      ),

   );
}


function nodereview_view_reviews($nid) {

  $output = 'test ' . $nid;

  drupal_set_title('Reviews');

  return $output;
}


function nodereview_list_axes($node_type) {
  static $axes = array();

  if (! isset($axes[$node_type])) {
    $result = db_query("SELECT na.aid, na.tag FROM {nodereview_axes} na WHERE na.node_type='%s'", $node_type);
    while ($record = db_fetch_object($result)) {
      $axes[$node_type][$record->aid] = $record->tag;
    }
  }
  return $axes[$node_type];
}


/**
 * Implementation of hook_node_type()
 *
 * To clear the cache when a content type
 * is modified and the changes to reflect
 * in nodereview settings page
 *
 */
function nodereview_node_type($op, $info) {
  cache_clear_all();
  menu_rebuild();
}


/**
 * Implementation of hook_views_api()
 *
 */
function nodereview_views_api() {

  return array(
    'api' => '2.0',
    'path' =>drupal_get_path('module', 'nodereview'),
  );
}


/**
 * Menu callback
 * Returns TRUE if no review for the current node from current user
 * Returns FALSE if review review for the current node from current user
 */
function node_add_review_load($arg) {
  global $user;
  $add_review = FALSE;
  $current_node = node_load($arg);
  $type =$current_node->type;
  $axes_count = db_result(db_query("SELECT COUNT(*) FROM {nodereview_axes} WHERE node_type='%s'", $type));
  if (variable_get('nodereview_use_' . $type, 0) && $axes_count) {
    $add_review = db_result(db_query("SELECT n.nid FROM {node} n INNER JOIN {nodereview} nr ON n.nid=nr.nid WHERE uid=%d AND reviewed_nid=%d", $user->uid, $arg));
  }
  return $add_review ? FALSE : $arg;
}


/**
 * Menu callback
 * Returns FALSE if no review for the current node from current user
 * Returns review node object if review for the current node exists to alter the review
 */
function node_edit_review_load($arg) {
  global $user;
  $edit_review = FALSE;
  $current_node = node_load($arg);
  $type =$current_node->type;
  $axes_count = db_result(db_query("SELECT COUNT(*) FROM {nodereview_axes} WHERE node_type='%s'", $type));
  if (variable_get('nodereview_use_' . $type, 0) && $axes_count) {
    $edit_review = db_result(db_query("SELECT n.nid FROM {node} n INNER JOIN {nodereview} nr ON n.nid=nr.nid WHERE uid=%d AND reviewed_nid=%d", $user->uid, $arg));
  }
  return $edit_review ? node_load($edit_review) : FALSE;
}

/**
 * Custom access menucallback for add review
 */
function addreview_access($arg) {
  $current_node = node_load($arg);
  $type =$current_node->type;
  $axes_count = db_result(db_query("SELECT COUNT(*) FROM {nodereview_axes} WHERE node_type='%s'", $type));
  return variable_get('nodereview_use_' . $type, 0) && $axes_count && user_access('submit reviews');
}

/**
 * Custom access menucallback for read review
 */
function read_reviews_access($arg) {
  $current_node = node_load($arg);
  $type =$current_node->type;
  return variable_get('nodereview_use_' . $type, 0) && user_access('read reviews');
}
